#pragma once
#include <cstdint>

// Default length of (Partition) Boot Sector
#define BOOT_SECTOR_SIZE 512

// File system types
enum class FileSystem { FAT32, NTFS, UNKNOWN };

// Structure of a FAT32 boot sector
#pragma pack(push, 1)
struct FAT32_BS {
	uint8_t jmpBoot[3];	// 0x00
	char OEM_id[8];		// 0x03
	uint16_t bytesPerSec; // 0x0B
	uint8_t secPerClus;	// 0x0D
	uint16_t rsvdSec;	// 0x0E
	uint8_t numFATs;	// 0x10
	uint16_t RDETcnt16;	// 0x11
	uint16_t numSecs16;	// 0x13
	uint8_t media;		// 0x15 // val 0xF8 for hard disk
	uint16_t secPerFAT16; // 0x16
	uint16_t secPerTrk;	// 0x18
	uint16_t numHeads;	// 0x1A
	uint32_t hiddSecs;	// 0x1C
	uint32_t numSecs;	// 0x20
	uint32_t secPerFAT;	// 0x24
	uint16_t extFlags;	// 0x28
	uint8_t minFAT32Ver; // 0x2A
	uint8_t majFAT32Ver; // 0x2B
	uint32_t rootClus;	// 0x2C
	uint16_t infoFS;	// 0x30
	uint16_t backupBootSec;	// 0x32
	uint8_t reserved[12];	// 0x34
	uint8_t logicDrvNum; // 0x40
	uint8_t unused;		// 0x41
	uint8_t extSig;		// 0x42 - 29h
	uint32_t partitionSerial; // 0x43
	char volName[11]; // 0x47
	char FATname[8]; // 0x52 - FAT32
	char executableCode[420]; // 0x5A
	uint16_t bootRecSig; // 0x1FE - 0xAA55
};
#pragma pack(pop)

// Structure of a NTFS boot sector
#pragma pack(push, 1)
struct NTFS_BS {
	uint8_t jmpBoot[3];	// 0x00
	char OEM_id[8];		// 0x03 // must be NTFS____
	uint16_t bytesPerSec; // 0x0B
	uint8_t secPerClus;	// 0x0D
	uint16_t rsvdSec;	// 0x0E
	uint8_t unused1[5];	// 0x10
	uint8_t media;		// 0x15 // val 0xF8 for hard drive (not floppy)
	uint16_t unused2; // 0x16
	uint16_t secPerTrk;	// 0x18
	uint16_t numHeads;	// 0x1A
	uint32_t hiddSecs;	// 0x1C
	uint64_t unused3;	// 0x20
	uint64_t numSecs;	// 0x28
	uint64_t clusOfMFT;	// 0x30
	uint64_t clusOfMirrMFT;	// 0x38

	int8_t szFileRecord; // 0x40 -> positive: num. of clusters || negative: 2^abs(value) bytes ; i.e: 0xf6 = -10 => 2^10 = 1024 bytes/File Record Segment
	uint8_t unused4[3];		// 0x41
	uint8_t szIndexBuff; // 0x44 -> positive: num. of clusters || negative: 2^abs(value) bytes ; i.e: 0xf6 = -10 => 2^10 = 1024 bytes/Index Buffer
	uint8_t unused5[3]; // 0x45
	uint8_t volumeSerial[8]; // 0x48
	uint32_t unused6;	// 0x50
	char executableCode[426]; // 0x54
	uint16_t bootRecSig; // 0x1FE - 0xAA55
};
#pragma pack(pop)

// Structure of a FAT32 directory entry
#pragma pack(push, 1)
struct FAT32_DirectoryEntry {
	char name[8]; // 0x00
	char ext[3]; // 0x08
	uint8_t attr; // 0x0B
	uint8_t reserved; // 0x0C
	uint8_t cTimeTenth; // 0x0D
	uint16_t cTime; // 0x0E
	uint16_t cDate; // 0x10
	uint16_t aDate; // 0x12
	uint16_t firstClusHi; // 0x14
	uint16_t wTime; // 0x16
	uint16_t wDate; // 0x18
	uint16_t firstClusLo; // 0x1A
	uint32_t fileSize; // 0x1C
};
#pragma pack(pop)

// Structure of a FAT32 LFN directory entry
#pragma pack(push, 1)
struct FAT32_LFN_DirectoryEntry {
	uint8_t seqNum; // 0x00
	uint16_t name1[5]; // 0x01
	uint8_t attr; // 0x0B
	uint8_t type; // 0x0C
	uint8_t checksum; // 0x0D
	uint16_t name2[6]; // 0x0E
	uint16_t firstClusLo; // 0x1C
	uint16_t name3[2]; // 0x1E
};
#pragma pack(pop)

// Structure of a NTFS entry
#pragma pack(push, 1)
struct NTFS_MftEntryHeader {
	uint8_t signature[4]; // 0x00
	uint16_t fixupOffset; // 0x04	
	uint16_t fixupSize; // 0x06
	uint64_t logSeqNum; // 0x08
	uint16_t seqNum; // 0x10
	uint16_t hardLinks; // 0x12
	uint16_t attrOffset; // 0x14 (important)
	uint16_t flags; // 0x16: 0x00: not in use, 0x01: in use, 0x02: directory, 0x03: directory and in use
	uint32_t usedLength; // 0x18
	uint32_t totalLength; // 0x1C
	uint64_t entryBase; // 0x20
	uint16_t nextAttrId; // 0x28
};
#pragma pack(pop)

#pragma pack(push, 1)
struct NTFS_MftEntry {
	NTFS_MftEntryHeader header;
	uint8_t* attributes;
};
#pragma pack(pop)

#pragma pack(push, 1)
struct NTFS_AttrHeader {
	uint32_t type; // 0x00
	uint32_t length; // 0x04
	uint8_t nonResident; // 0x08
	uint8_t nameLength; // 0x09
	uint16_t nameOffset; // 0x0A
	uint16_t flags; // 0x0C
	uint16_t attrId; // 0x0E
};
#pragma pack(pop)

#pragma pack(push, 1)
struct NTFS_AttrResident {
	NTFS_AttrHeader header;
	uint16_t length; // 0x10
	uint16_t attrOffset; // 0x12
	uint8_t indexed; // 0x14
	uint8_t padding; // 0x15
	uint16_t contentLength; // 0x16
	uint16_t contentOffset; // 0x18
	uint16_t flags; // 0x1A
};
#pragma pack(pop)

#pragma pack(push, 1)
struct NTFS_AttrNonResident {
	NTFS_AttrHeader header;
	uint64_t startVCN; // 0x10
	uint64_t endVCN; // 0x18
	uint16_t dataRunOffset; // 0x20
	uint16_t compressionUnitSize; // 0x22
	uint32_t padding; // 0x24
	uint64_t allocatedSize; // 0x28
	uint64_t dataSize; // 0x30
	uint64_t initializedSize; // 0x38
	uint64_t compressedSize; // 0x40
};
#pragma pack(pop)

#pragma pack(push, 1)
struct NTFS_AttrDataNonRes {
	NTFS_AttrHeader header;
	uint64_t initialVCN; // 0x10
	uint64_t finalVCN; // 0x18
	uint16_t dataRunOffset; // 0x20
	uint16_t compressionUnitSize; // 0x22
	uint32_t padding; // 0x24
	uint64_t allocatedSize; // 0x28
	uint64_t dataSize; // 0x30
	uint64_t initializedSize; // 0x38
};
#pragma pack(pop)

#pragma pack(push, 1)
struct NTFS_AttrDataRes {
	NTFS_AttrHeader header;
	uint32_t length; // 0x10
	uint16_t attrOffset; // 0x14
	uint8_t indexed; // 0x16
	uint8_t padding; // 0x17
	uint8_t content; // 0x18
};

#pragma pack(push, 1)
struct NTFS_AttrIndexRoot {
	NTFS_AttrHeader header;
	int32_t length; // 0x10
	uint16_t attrOffset; // 0x14
	uint8_t indexed; // 0x16
	uint8_t padding; // 0x17
	wchar_t attrName[4]; // 0x18
	uint32_t attrType; // 0x20
	uint32_t collationRule; // 0x24
	uint32_t indexAllocationSize; // 0x28
	uint8_t clustersPerIndexRecord; // 0x2C
	uint8_t padding2[3]; // 0x2D
	uint32_t offsetToFirstIndexEntry; // 0x30
	uint32_t totalSizeOfEntries; // 0x34
	uint32_t allocatedSizeOfEntries; // 0x38
	uint8_t flags; // 0x3C
	uint8_t padding3[3]; // 0x3D
};
#pragma pack(pop)

#pragma pack(push, 1)
struct NTFS_AttrFileName {
	NTFS_AttrHeader header;
	uint64_t parentDirRef; // 0x10
	uint64_t createTime; // 0x18
	uint64_t modifyTime; // 0x20
	uint64_t mftChangeTime; // 0x28
	uint64_t accessedTime; // 0x30
	uint64_t allocatedSize; // 0x38
	uint64_t dataSize; // 0x40
	uint32_t flags; // 0x48
	uint32_t reparse; // 0x4C
	uint8_t nameLength; // 0x50
	uint8_t nameType; // 0x51
	uint16_t name[0x30]; // 0x52
};
#pragma pack(pop)

#pragma pack(push, 1)
struct NTFS_AttrStandardInfo {
	NTFS_AttrHeader header;
	int32_t length; // 0x10
	uint16_t attrOffset; // 0x14
	uint8_t indexed; // 0x16
	uint8_t padding; // 0x17
	uint64_t createdTime; // 0x18
	uint64_t modifiedTime; // 0x20
	uint64_t mftChangedTime; // 0x28
	uint64_t accessedTime; // 0x2A
	uint32_t fileFlags; // 0x38
	uint32_t padding2; // 0x3C
};
#pragma pack(pop)

#pragma pack(push, 1)
struct NTFS_IndexFile {
	uint8_t signature[4]; // 0x00 - INDX
	uint16_t fixupOffset; // 0x04
	uint16_t fixupSize; // 0x06
	uint64_t logSeqNum; // 0x08
	uint64_t indexVCN; // 0x10
	uint32_t indexEntryOffset; // 0x18
	uint32_t indexEntrySize; // 0x1C
	uint32_t indexEntryAllocSize; // 0x20
	uint8_t flags; // 0x24 - designate if the node has children
	uint8_t padding[3]; // 0x25
	uint16_t updateSeqNum; // 0x28
	uint8_t* others; // 0x2A
};
#pragma pack(pop)

#pragma pack(push, 1)
struct NTFS_IndexEntry {
	uint64_t reference; // 0x00
uint16_t length; // 0x08
uint16_t offsetToEndName; // 0x0A
uint16_t flags; // 0x0C
uint8_t padding[2]; // 0x0E
uint64_t parentDirRef; // 0x10
uint64_t createTime; // 0x18
uint64_t modifyTime; // 0x20
uint64_t mftChangeTime; // 0x28
uint64_t accessTime; // 0x30
uint64_t allocatedSize; // 0x38
uint64_t dataSize; // 0x40
uint64_t fileFlags; // 0x48
uint8_t nameLength; // 0x50
uint8_t fileNamespace; // 0x51
wchar_t fileName; // 0x52
};
#pragma pack(pop)




// -----------------------------------------------------------------------------------------
#define _FAT32_BS_FOR_TEST  {															\
	0xEB, 0x58, 0x90, 0x4D, 0x53, 0x44, 0x4F, 0x53, 0x35, 0x2E, 0x30, 0x00,		\
	0x02, 0x10, 0x90, 0x0D, 0x02, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00,		\
	0x3F, 0x00, 0xFF, 0x00, 0x20, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0xCA, 0x01,		\
	0x38, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,		\
	0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		\
	0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x29, 0xAE, 0xA2, 0x14, 0xD0, 0x4E,		\
	0x4F, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x20, 0x20, 0x20, 0x46, 0x41,		\
	0x54, 0x33, 0x32, 0x20, 0x20, 0x20, 0x33, 0xC9, 0x8E, 0xD1, 0xBC, 0xF4,		\
	0x7B, 0x8E, 0xC1, 0x8E, 0xD9, 0xBD, 0x00, 0x7C, 0x88, 0x56, 0x40, 0x88,		\
	0x4E, 0x02, 0x8A, 0x56, 0x40, 0xB4, 0x41, 0xBB, 0xAA, 0x55, 0xCD, 0x13,		\
	0x72, 0x10, 0x81, 0xFB, 0x55, 0xAA, 0x75, 0x0A, 0xF6, 0xC1, 0x01, 0x74,		\
	0x05, 0xFE, 0x46, 0x02, 0xEB, 0x2D, 0x8A, 0x56, 0x40, 0xB4, 0x08, 0xCD,		\
	0x13, 0x73, 0x05, 0xB9, 0xFF, 0xFF, 0x8A, 0xF1, 0x66, 0x0F, 0xB6, 0xC6,		\
	0x40, 0x66, 0x0F, 0xB6, 0xD1, 0x80, 0xE2, 0x3F, 0xF7, 0xE2, 0x86, 0xCD,		\
	0xC0, 0xED, 0x06, 0x41, 0x66, 0x0F, 0xB7, 0xC9, 0x66, 0xF7, 0xE1, 0x66,		\
	0x89, 0x46, 0xF8, 0x83, 0x7E, 0x16, 0x00, 0x75, 0x39, 0x83, 0x7E, 0x2A,		\
	0x00, 0x77, 0x33, 0x66, 0x8B, 0x46, 0x1C, 0x66, 0x83, 0xC0, 0x0C, 0xBB,		\
	0x00, 0x80, 0xB9, 0x01, 0x00, 0xE8, 0x2C, 0x00, 0xE9, 0xA8, 0x03, 0xA1,		\
	0xF8, 0x7D, 0x80, 0xC4, 0x7C, 0x8B, 0xF0, 0xAC, 0x84, 0xC0, 0x74, 0x17,		\
	0x3C, 0xFF, 0x74, 0x09, 0xB4, 0x0E, 0xBB, 0x07, 0x00, 0xCD, 0x10, 0xEB,		\
	0xEE, 0xA1, 0xFA, 0x7D, 0xEB, 0xE4, 0xA1, 0x7D, 0x80, 0xEB, 0xDF, 0x98,		\
	0xCD, 0x16, 0xCD, 0x19, 0x66, 0x60, 0x80, 0x7E, 0x02, 0x00, 0x0F, 0x84,		\
	0x20, 0x00, 0x66, 0x6A, 0x00, 0x66, 0x50, 0x06, 0x53, 0x66, 0x68, 0x10,		\
	0x00, 0x01, 0x00, 0xB4, 0x42, 0x8A, 0x56, 0x40, 0x8B, 0xF4, 0xCD, 0x13,		\
	0x66, 0x58, 0x66, 0x58, 0x66, 0x58, 0x66, 0x58, 0xEB, 0x33, 0x66, 0x3B,		\
	0x46, 0xF8, 0x72, 0x03, 0xF9, 0xEB, 0x2A, 0x66, 0x33, 0xD2, 0x66, 0x0F,		\
	0xB7, 0x4E, 0x18, 0x66, 0xF7, 0xF1, 0xFE, 0xC2, 0x8A, 0xCA, 0x66, 0x8B,		\
	0xD0, 0x66, 0xC1, 0xEA, 0x10, 0xF7, 0x76, 0x1A, 0x86, 0xD6, 0x8A, 0x56,		\
	0x40, 0x8A, 0xE8, 0xC0, 0xE4, 0x06, 0x0A, 0xCC, 0xB8, 0x01, 0x02, 0xCD,		\
	0x13, 0x66, 0x61, 0x0F, 0x82, 0x74, 0xFF, 0x81, 0xC3, 0x00, 0x02, 0x66,		\
	0x40, 0x49, 0x75, 0x94, 0xC3, 0x42, 0x4F, 0x4F, 0x54, 0x4D, 0x47, 0x52,		\
	0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		\
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		\
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		\
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		\
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x0A, 0x44, 0x69,		\
	0x73, 0x6B, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0xFF, 0x0D, 0x0A, 0x50,		\
	0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6E, 0x79, 0x20, 0x6B, 0x65, 0x79,		\
	0x20, 0x74, 0x6F, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x0D,		\
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		\
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		\
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		\
	0xAC, 0x01, 0xB9, 0x01, 0x00, 0x00, 0x55, 0xAA								\
		};

#define _NTFS_BS_FOR_TEST {														\
	0xEB, 0x52, 0x90, 0x4E, 0x54, 0x46, 0x53, 0x20, 0x20, 0x20, 0x20, 0x00,		\
	0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00,		\
	0x3F, 0x00, 0xFF, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		\
	0x80, 0x00, 0x00, 0x00, 0xDF, 0x3F, 0xCA, 0x01, 0x00, 0x00, 0x00, 0x00,		\
	0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,		\
	0x00, 0x00, 0x00, 0x00, 0xF6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,		\
	0x99, 0x4E, 0x36, 0xF2, 0x82, 0x36, 0xF2, 0x6E, 0x00, 0x00, 0x00, 0x00,		\
	0xFA, 0x33, 0xC0, 0x8E, 0xD0, 0xBC, 0x00, 0x7C, 0xFB, 0x68, 0xC0, 0x07,		\
	0x1F, 0x1E, 0x68, 0x66, 0x00, 0xCB, 0x88, 0x16, 0x0E, 0x00, 0x66, 0x81,		\
	0x3E, 0x03, 0x00, 0x4E, 0x54, 0x46, 0x53, 0x75, 0x15, 0xB4, 0x41, 0xBB,		\
	0xAA, 0x55, 0xCD, 0x13, 0x72, 0x0C, 0x81, 0xFB, 0x55, 0xAA, 0x75, 0x06,		\
	0xF7, 0xC1, 0x01, 0x00, 0x75, 0x03, 0xE9, 0xDD, 0x00, 0x1E, 0x83, 0xEC,		\
	0x18, 0x68, 0x1A, 0x00, 0xB4, 0x48, 0x8A, 0x16, 0x0E, 0x00, 0x8B, 0xF4,		\
	0x16, 0x1F, 0xCD, 0x13, 0x9F, 0x83, 0xC4, 0x18, 0x9E, 0x58, 0x1F, 0x72,		\
	0xE1, 0x3B, 0x06, 0x0B, 0x00, 0x75, 0xDB, 0xA3, 0x0F, 0x00, 0xC1, 0x2E,		\
	0x0F, 0x00, 0x04, 0x1E, 0x5A, 0x33, 0xDB, 0xB9, 0x00, 0x20, 0x2B, 0xC8,		\
	0x66, 0xFF, 0x06, 0x11, 0x00, 0x03, 0x16, 0x0F, 0x00, 0x8E, 0xC2, 0xFF,		\
	0x06, 0x16, 0x00, 0xE8, 0x4B, 0x00, 0x2B, 0xC8, 0x77, 0xEF, 0xB8, 0x00,		\
	0xBB, 0xCD, 0x1A, 0x66, 0x23, 0xC0, 0x75, 0x2D, 0x66, 0x81, 0xFB, 0x54,		\
	0x43, 0x50, 0x41, 0x75, 0x24, 0x81, 0xF9, 0x02, 0x01, 0x72, 0x1E, 0x16,		\
	0x68, 0x07, 0xBB, 0x16, 0x68, 0x52, 0x11, 0x16, 0x68, 0x09, 0x00, 0x66,		\
	0x53, 0x66, 0x53, 0x66, 0x55, 0x16, 0x16, 0x16, 0x68, 0xB8, 0x01, 0x66,		\
	0x61, 0x0E, 0x07, 0xCD, 0x1A, 0x33, 0xC0, 0xBF, 0x0A, 0x13, 0xB9, 0xF6,		\
	0x0C, 0xFC, 0xF3, 0xAA, 0xE9, 0xFE, 0x01, 0x90, 0x90, 0x66, 0x60, 0x1E,		\
	0x06, 0x66, 0xA1, 0x11, 0x00, 0x66, 0x03, 0x06, 0x1C, 0x00, 0x1E, 0x66,		\
	0x68, 0x00, 0x00, 0x00, 0x00, 0x66, 0x50, 0x06, 0x53, 0x68, 0x01, 0x00,		\
	0x68, 0x10, 0x00, 0xB4, 0x42, 0x8A, 0x16, 0x0E, 0x00, 0x16, 0x1F, 0x8B,		\
	0xF4, 0xCD, 0x13, 0x66, 0x59, 0x5B, 0x5A, 0x66, 0x59, 0x66, 0x59, 0x1F,		\
	0x0F, 0x82, 0x16, 0x00, 0x66, 0xFF, 0x06, 0x11, 0x00, 0x03, 0x16, 0x0F,		\
	0x00, 0x8E, 0xC2, 0xFF, 0x0E, 0x16, 0x00, 0x75, 0xBC, 0x07, 0x1F, 0x66,		\
	0x61, 0xC3, 0xA1, 0xF6, 0x01, 0xE8, 0x09, 0x00, 0xA1, 0xFA, 0x01, 0xE8,		\
	0x03, 0x00, 0xF4, 0xEB, 0xFD, 0x8B, 0xF0, 0xAC, 0x3C, 0x00, 0x74, 0x09,		\
	0xB4, 0x0E, 0xBB, 0x07, 0x00, 0xCD, 0x10, 0xEB, 0xF2, 0xC3, 0x0D, 0x0A,		\
	0x41, 0x20, 0x64, 0x69, 0x73, 0x6B, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20,		\
	0x65, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x6F, 0x63, 0x63, 0x75, 0x72, 0x72,		\
	0x65, 0x64, 0x00, 0x0D, 0x0A, 0x42, 0x4F, 0x4F, 0x54, 0x4D, 0x47, 0x52,		\
	0x20, 0x69, 0x73, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73,		\
	0x65, 0x64, 0x00, 0x0D, 0x0A, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x43,		\
	0x74, 0x72, 0x6C, 0x2B, 0x41, 0x6C, 0x74, 0x2B, 0x44, 0x65, 0x6C, 0x20,		\
	0x74, 0x6F, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x0D, 0x0A,		\
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,		\
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8A, 0x01,		\
	0xA7, 0x01, 0xBF, 0x01, 0x00, 0x00, 0x55, 0xAA								\
}

